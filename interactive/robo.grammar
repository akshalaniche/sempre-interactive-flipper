(include dal.grammar)

# Robot action functions (macors merely for formatting)
(def @visit visit)
(def @pick pick)
(def @drop drop)

### Action Rules ###

(rule $Action (visit $Point) (lambda x (: @visit (var x))) (anchored 1))
(rule $Action (visit $Area) (lambda a (: @visit (call anyPoint (var a)))) (anchored 1))
(rule $Action (visit $Point while avoiding $Area) (lambda f  (lambda a (: @visit (var f) (var a)))) (anchored 1))
(rule $Action (visit $Area while avoiding $Area)
    (lambda a1 (lambda a2 (: @visit (call anyPoint (var a1)) (var a2)))) (anchored 1))
# Visit selected field (usually set by foreach); to be changed
(rule $Action (visit) (ConstantFn (: @visit)) (anchored 1))

#(rule $Action (pick $Item) (lambda c (: @pick (number 1) (var c))) (anchored 1))
(rule $Action (pick $ActionItem) (lambda c
    (: @pick (var c))) (anchored 1))
(rule $Action (drop $ActionItem) (lambda c
    (: @drop (var c))) (anchored 1))

#(rule $LimitedItem ($LambdaItem) (lambda i (limit (number 2) (apply (var i) world))) (anchored 1))
#(rule $LimitedItem ($Item) (lambda i (limit (number 2) (var i))) (anchored 1))
#(rule $LimitedItem ($Item) (IdentityFn) (anchored 1))

#(rule $Action (foreach $Variable in $Set $Action )
    #(lambda v (lambda s (lambda a (:foreach (var v) (var s) (var a))))) (anchored 1))
(rule $Action (foreach point in $Area $Action )
    (lambda s (lambda a (:foreach point (var s) (var a)))) (anchored 1))
(rule $Action (foreach area in $AreaCollection $Action )
    (lambda s (lambda a (:foreach area (var s) (var a)))) (anchored 1))

### Variable Rules ###

(rule $Area (area) (ConstantFn (call getSelectedArea)) (anchored 1))
(rule $Point (point) (ConstantFn (call getSelectedPoint)) (anchored 1))

### Situation Rules ###

# These will be used only if the final language spec requires it
#(rule $Situation ( { $Situations } ) (IdentityFn) (anchored 1))
(rule $Situations ($Situation) (IdentityFn) (anchored 1))
#(rule $Situations ($Situations or $Situation) (lambda s1 (lambda s2 (call || (var s1) (var s2)))) (anchored 1))
#(rule $Situations ($Situations and $Situation) (lambda s1 (lambda s2 (call && (var s1) (var s2)))) (anchored 1))
#(rule $Situation (not $Situations) (lambda s (call ! (var s) )) (anchored 1))

# JoinFn's must be qualified with items?rel in order to specify that the join should be done
# on items as opposed to walls or open spaces.
(rule $Situation ($Item at $Point) (lambda i (lambda f (and (var i) (items?point (var f))))) (anchored 1))
(rule $Situation ($Item at $Area) (lambda i (lambda a (and (var i) (items?point (var a))))) (anchored 1))
(rule $Situation (robot has $Item) (lambda i (and (var i) (items?carried (boolean true)))) (anchored 1))
(rule $Situation (robot at $Point) (lambda f (and (var f) (call getRobotLocation))) (anchored 1))
(rule $Situation (robot at $Area) (lambda a (and (var a) (call getRobotLocation))) (anchored 1))

### Location Rules ###

(rule $Set ($Area) (IdentityFn) (anchored 1))
(rule $Set ($AreaCollection) (IdentityFn) (anchored 1))

(rule $AreaCollection ([ $AreaList ]) (IdentityFn) (anchored 1))

(rule $Area (world) world (anchored 1))
(rule $Area ([ $PointList ]) (IdentityFn) (anchored 1))
#(rule $Area ( not $Areas ) (lambda a1 (not (var a1))) (anchored 1))
(rule $Areas ( $Area ) (IdentityFn) (anchored 1))
(rule $Areas ( $Areas + $Area ) (lambda a1 (lambda a2 (or (var a1) (var a2)))) (anchored 1))
(rule $Areas ( $Areas * $Area ) (lambda a1 (lambda a2 (and (var a1) (var a2)))) (anchored 1))
(rule $Areas ( $Areas - $Area ) (lambda a1 (lambda a2 (and (var a1) (not (var a2))))) (anchored 1))
(rule $AreaList ( $Area ) (IdentityFn) (anchored 1))
(rule $AreaList ( $AreaList , $Area ) (lambda x ( lambda y (call combineCollections (var x) (var y)))) (anchored 1))

(rule $Point (any $Area) (lambda x (call anyPoint (var x))) (anchored 1))
(rule $Point ([ $Number , $Number ]) (lambda x (lambda y (call makePoint (var x) (var y)))) (anchored 1))
(rule $Point (current) (ConstantFn (call getRobotLocation)) (anchored 1))
(rule $PointList ( $Point ) (IdentityFn) (anchored 1))
(rule $PointList ( $PointList , $Point ) (lambda x ( lambda y (or (var x) (var y)))) (anchored 1))

# Read as: intersection between area (var a) and the fields of items which are carried and specified
# by the item filter (var i)
(rule $Area ($Area containing $Item) (lambda a (lambda i
    (and (var a) ((reverse items?point) (and (items?carried (boolean false)) (var i)))))) (anchored 1))

### Item Rules ###

(rule $ActionItem ($Item) (lambda i (call setLimit (number 1) (var i))) (anchored 1))
(rule $ActionItem (every $Item) (lambda i (call setLimit (number -1) (var i))) (anchored 1))

(rule $Item (item) (ConstantFn (call allItems)) (anchored 1))
(rule $Item (item $ColorSets) (IdentityFn) (anchored 1))

(rule $ColorSet (has $Rel $Color) (lambda r (lambda c ((var r) (var c)))) (anchored 1))
(rule $ColorSets ($ColorSet) (IdentityFn) (anchored 1))
(rule $ColorSet ( { $ColorSets } ) (IdentityFn) (anchored 1))
(rule $ColorSet (! $ColorSets) (lambda x (not (var x))) (anchored 1))
(rule $ColorSets ($ColorSets && $ColorSet) (lambda s1 (lambda s2
					(and (var s1) (var s2)))) (anchored 1))
(rule $ColorSets ($ColorSets || $ColorSet) (lambda s1 (lambda s2
					(or (var s1) (var s2)))) (anchored 1))

(rule $Rel (color) items?color (anchored 1))



### Data type definitions ###

(rule $Color ($TOKEN) (SimpleLexiconFn (type color)) (anchored 1))

(rule $Number ($TOKEN) (NumberFn) (anchored 1))
